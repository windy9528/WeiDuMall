package bwie.com.weidumall.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bwie.com.weidumall.entity.cart.SysnGoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSN_GOODS".
*/
public class SysnGoodsDao extends AbstractDao<SysnGoods, Long> {

    public static final String TABLENAME = "SYSN_GOODS";

    /**
     * Properties of entity SysnGoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommodityId = new Property(0, long.class, "commodityId", true, "_id");
        public final static Property Count = new Property(1, int.class, "count", false, "COUNT");
    }


    public SysnGoodsDao(DaoConfig config) {
        super(config);
    }
    
    public SysnGoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSN_GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: commodityId
                "\"COUNT\" INTEGER NOT NULL );"); // 1: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSN_GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysnGoods entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityId());
        stmt.bindLong(2, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysnGoods entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityId());
        stmt.bindLong(2, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SysnGoods readEntity(Cursor cursor, int offset) {
        SysnGoods entity = new SysnGoods( //
            cursor.getLong(offset + 0), // commodityId
            cursor.getInt(offset + 1) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysnGoods entity, int offset) {
        entity.setCommodityId(cursor.getLong(offset + 0));
        entity.setCount(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysnGoods entity, long rowId) {
        entity.setCommodityId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysnGoods entity) {
        if(entity != null) {
            return entity.getCommodityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysnGoods entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
